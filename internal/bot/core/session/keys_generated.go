// Code generated by go generate; DO NOT EDIT.
package session

import (
	"time"

	"github.com/disgoorg/snowflake/v2"
	apiTypes "github.com/jaxron/roapi.go/pkg/api/types"
	"github.com/robalyx/rotector/internal/common/client/ai"
	"github.com/robalyx/rotector/internal/common/storage/database/types"
	"github.com/robalyx/rotector/internal/common/storage/database/types/enum"
	"github.com/robalyx/rotector/internal/worker/core"
)

var (

	// MessageID stores the ID of the current message
	MessageID = NewKey[string]("MessageID")
	// CurrentPage stores the current page identifier
	CurrentPage = NewKey[string]("CurrentPage")
	// PreviousPages stores the navigation history
	PreviousPages = NewKey[[]string]("PreviousPages")
	// PaginationPage stores the current pagination page number
	PaginationPage = NewKey[int]("PaginationPage")
	// PaginationOffset stores the starting offset
	PaginationOffset = NewKey[int]("PaginationOffset")
	// PaginationTotalItems stores the total number of items
	PaginationTotalItems = NewKey[int]("PaginationTotalItems")
	// PaginationTotalPages stores the total number of pages
	PaginationTotalPages = NewKey[int]("PaginationTotalPages")
	// PaginationHasNextPage indicates if there is a next page
	PaginationHasNextPage = NewKey[bool]("PaginationHasNextPage")
	// PaginationHasPrevPage indicates if there is a previous page
	PaginationHasPrevPage = NewKey[bool]("PaginationHasPrevPage")
	// PaginationIsStreaming indicates if image streaming is active
	PaginationIsStreaming = NewKey[bool]("PaginationIsStreaming")
	// StatsIsRefreshed indicates if the data has been refreshed
	StatsIsRefreshed = NewKey[bool]("StatsIsRefreshed")
	// StatsUserCounts stores user statistics
	StatsUserCounts = NewKey[*types.UserCounts]("StatsUserCounts")
	// StatsGroupCounts stores group statistics
	StatsGroupCounts = NewKey[*types.GroupCounts]("StatsGroupCounts")
	// StatsActiveUsers stores the list of active reviewers
	StatsActiveUsers = NewKey[[]snowflake.ID]("StatsActiveUsers")
	// StatsVotes stores a user's voting statistics
	StatsVotes = NewKey[*types.VoteAccuracy]("StatsVotes")
	// StatusWorkers stores worker status information
	StatusWorkers = NewKey[[]core.Status]("StatusWorkers")
	// SettingName stores the name of the current setting
	SettingName = NewKey[string]("SettingName")
	// SettingType stores the type of the current setting
	SettingType = NewKey[string]("SettingType")
	// SettingValue stores the setting value
	SettingValue = NewKey[*Setting]("SettingValue")
	// SettingDisplay stores the display value of the setting
	SettingDisplay = NewKey[string]("SettingDisplay")
	// SettingCustomID stores the custom identifier
	SettingCustomID = NewKey[string]("SettingCustomID")
	// UserTarget stores the currently selected user
	UserTarget = NewKey[*types.ReviewUser]("UserTarget")
	// UserFriends stores the user's friend list
	UserFriends = NewKey[[]*apiTypes.ExtendedFriend]("UserFriends")
	// UserPresences stores friend presence information
	UserPresences = NewKey[map[uint64]*apiTypes.UserPresenceResponse]("UserPresences")
	// UserFlaggedFriends stores flagged friends
	UserFlaggedFriends = NewKey[map[uint64]*types.ReviewUser]("UserFlaggedFriends")
	// UserGroups stores the list of groups
	UserGroups = NewKey[[]*apiTypes.UserGroupRoles]("UserGroups")
	// UserFlaggedGroups stores flagged groups
	UserFlaggedGroups = NewKey[map[uint64]*types.ReviewGroup]("UserFlaggedGroups")
	// UserOutfits stores user outfits
	UserOutfits = NewKey[[]*apiTypes.Outfit]("UserOutfits")
	// GroupTarget stores the currently selected group
	GroupTarget = NewKey[*types.ReviewGroup]("GroupTarget")
	// GroupMemberIDs stores member IDs for the current group
	GroupMemberIDs = NewKey[[]uint64]("GroupMemberIDs")
	// GroupMembers stores member details for the current group
	GroupMembers = NewKey[map[uint64]*types.ReviewUser]("GroupMembers")
	// GroupPageMembers stores the current page of group members
	GroupPageMembers = NewKey[[]uint64]("GroupPageMembers")
	// GroupInfo stores additional group information
	GroupInfo = NewKey[*apiTypes.GroupResponse]("GroupInfo")
	// ChatHistory stores the conversation history
	ChatHistory = NewKey[ai.ChatHistory]("ChatHistory")
	// ChatContext stores chat context information
	ChatContext = NewKey[string]("ChatContext")
	// LogActivities stores activity logs
	LogActivities = NewKey[[]*types.ActivityLog]("LogActivities")
	// LogCursor stores the current log cursor
	LogCursor = NewKey[*types.LogCursor]("LogCursor")
	// LogNextCursor stores the next log cursor
	LogNextCursor = NewKey[*types.LogCursor]("LogNextCursor")
	// LogPrevCursors stores previous log cursors
	LogPrevCursors = NewKey[[]*types.LogCursor]("LogPrevCursors")
	// LogFilterDiscordID stores Discord ID filter
	LogFilterDiscordID = NewKey[uint64]("LogFilterDiscordID")
	// LogFilterUserID stores user ID filter
	LogFilterUserID = NewKey[uint64]("LogFilterUserID")
	// LogFilterGroupID stores group ID filter
	LogFilterGroupID = NewKey[uint64]("LogFilterGroupID")
	// LogFilterReviewerID stores reviewer ID filter
	LogFilterReviewerID = NewKey[uint64]("LogFilterReviewerID")
	// LogFilterActivityType stores activity type filter
	LogFilterActivityType = NewKey[enum.ActivityType]("LogFilterActivityType")
	// LogFilterDateRangeStart stores start date filter
	LogFilterDateRangeStart = NewKey[time.Time]("LogFilterDateRangeStart")
	// LogFilterDateRangeEnd stores end date filter
	LogFilterDateRangeEnd = NewKey[time.Time]("LogFilterDateRangeEnd")
	// QueueUser stores the queued user
	QueueUser = NewKey[uint64]("QueueUser")
	// QueueStatus stores the queue status
	QueueStatus = NewKey[string]("QueueStatus")
	// QueuePriority stores the queue priority
	QueuePriority = NewKey[string]("QueuePriority")
	// QueuePosition stores the queue position
	QueuePosition = NewKey[int]("QueuePosition")
	// QueueHighCount stores high priority queue count
	QueueHighCount = NewKey[int]("QueueHighCount")
	// QueueNormalCount stores normal priority queue count
	QueueNormalCount = NewKey[int]("QueueNormalCount")
	// QueueLowCount stores low priority queue count
	QueueLowCount = NewKey[int]("QueueLowCount")
	// AppealList stores the current page of appeals
	AppealList = NewKey[[]*types.Appeal]("AppealList")
	// AppealSelected stores the currently selected appeal
	AppealSelected = NewKey[*types.Appeal]("AppealSelected")
	// AppealMessages stores messages for the current appeal
	AppealMessages = NewKey[[]*types.AppealMessage]("AppealMessages")
	// AppealCursor stores the current cursor position
	AppealCursor = NewKey[*types.AppealTimeline]("AppealCursor")
	// AppealNextCursor stores the next cursor position
	AppealNextCursor = NewKey[*types.AppealTimeline]("AppealNextCursor")
	// AppealPrevCursors stores previous cursor positions
	AppealPrevCursors = NewKey[[]*types.AppealTimeline]("AppealPrevCursors")
	// VerifyUserID stores the user ID being verified
	VerifyUserID = NewKey[uint64]("VerifyUserID")
	// VerifyReason stores the verification reason
	VerifyReason = NewKey[string]("VerifyReason")
	// VerifyCode stores the verification code
	VerifyCode = NewKey[string]("VerifyCode")
	// CaptchaAnswer stores the CAPTCHA answer
	CaptchaAnswer = NewKey[string]("CaptchaAnswer")
	// AdminAction stores the current admin action
	AdminAction = NewKey[string]("AdminAction")
	// AdminActionID stores the admin action ID
	AdminActionID = NewKey[string]("AdminActionID")
	// AdminReason stores the admin action reason
	AdminReason = NewKey[string]("AdminReason")
	// AdminBanReason stores the ban reason
	AdminBanReason = NewKey[enum.BanReason]("AdminBanReason")
	// AdminBanExpiry stores the ban expiry time
	AdminBanExpiry = NewKey[*time.Time]("AdminBanExpiry")
	// AdminBanInfo stores ban information
	AdminBanInfo = NewKey[*types.DiscordBan]("AdminBanInfo")
	// LeaderboardStats stores leaderboard statistics
	LeaderboardStats = NewKey[[]*types.VoteAccuracy]("LeaderboardStats")
	// LeaderboardUsernames stores usernames for the leaderboard
	LeaderboardUsernames = NewKey[map[uint64]string]("LeaderboardUsernames")
	// LeaderboardCursor stores the current leaderboard cursor
	LeaderboardCursor = NewKey[*types.LeaderboardCursor]("LeaderboardCursor")
	// LeaderboardNextCursor stores the next leaderboard cursor
	LeaderboardNextCursor = NewKey[*types.LeaderboardCursor]("LeaderboardNextCursor")
	// LeaderboardPrevCursors stores previous leaderboard cursors
	LeaderboardPrevCursors = NewKey[[]*types.LeaderboardCursor]("LeaderboardPrevCursors")
	// LeaderboardLastRefresh stores the last refresh time
	LeaderboardLastRefresh = NewKey[time.Time]("LeaderboardLastRefresh")
	// LeaderboardNextRefresh stores the next refresh time
	LeaderboardNextRefresh = NewKey[time.Time]("LeaderboardNextRefresh")

	// ImageBuffer stores binary image data
	ImageBuffer = NewBufferKey("ImageBuffer")
)
