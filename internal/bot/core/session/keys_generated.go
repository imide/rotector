// Code generated by go generate; DO NOT EDIT.
package session

import (
	"time"

	"github.com/disgoorg/snowflake/v2"
	apiTypes "github.com/jaxron/roapi.go/pkg/api/types"
	"github.com/robalyx/rotector/internal/common/client/ai"
	"github.com/robalyx/rotector/internal/common/storage/database/types"
	"github.com/robalyx/rotector/internal/common/storage/database/types/enum"
	"github.com/robalyx/rotector/internal/worker/core"
)

var (

	// MessageID stores the ID of the current message
	MessageID = NewKey[string]("MessageID")
	// CurrentPage stores the current page identifier
	CurrentPage = NewKey[string]("CurrentPage")
	// PreviousPages stores the navigation history
	PreviousPages = NewKey[[]string]("PreviousPages")
	// IsRefreshed indicates if the data has been refreshed
	IsRefreshed = NewKey[bool]("IsRefreshed")
	// PaginationPage stores the current pagination page number
	PaginationPage = NewKey[int]("PaginationPage")
	// Start stores the starting offset
	Start = NewKey[int]("Start")
	// TotalItems stores the total number of items
	TotalItems = NewKey[int]("TotalItems")
	// TotalPages stores the total number of pages
	TotalPages = NewKey[int]("TotalPages")
	// HasNextPage indicates if there is a next page
	HasNextPage = NewKey[bool]("HasNextPage")
	// HasPrevPage indicates if there is a previous page
	HasPrevPage = NewKey[bool]("HasPrevPage")
	// IsStreaming indicates if streaming is active
	IsStreaming = NewKey[bool]("IsStreaming")
	// UserCounts stores user statistics
	UserCounts = NewKey[*types.UserCounts]("UserCounts")
	// GroupCounts stores group statistics
	GroupCounts = NewKey[*types.GroupCounts]("GroupCounts")
	// ConfirmedCount stores the number of confirmed items
	ConfirmedCount = NewKey[int]("ConfirmedCount")
	// FlaggedCount stores the number of flagged items
	FlaggedCount = NewKey[int]("FlaggedCount")
	// ClearedCount stores the number of cleared items
	ClearedCount = NewKey[int]("ClearedCount")
	// ActiveUsers stores the list of active users
	ActiveUsers = NewKey[[]snowflake.ID]("ActiveUsers")
	// WorkerStatuses stores worker status information
	WorkerStatuses = NewKey[[]core.Status]("WorkerStatuses")
	// VoteStats stores voting statistics
	VoteStats = NewKey[*types.VoteAccuracy]("VoteStats")
	// SettingName stores the name of the current setting
	SettingName = NewKey[string]("SettingName")
	// SettingType stores the type of the current setting
	SettingType = NewKey[string]("SettingType")
	// SettingValue stores the setting value
	SettingValue = NewKey[*Setting]("SettingValue")
	// SettingDisplay stores the display value of the setting
	SettingDisplay = NewKey[string]("SettingDisplay")
	// CustomID stores the custom identifier
	CustomID = NewKey[string]("CustomID")
	// Options stores available options
	Options = NewKey[[]interface{}]("Options")
	// Roles stores role information
	Roles = NewKey[[]string]("Roles")
	// UserTarget stores the currently selected user
	UserTarget = NewKey[*types.ReviewUser]("UserTarget")
	// Friends stores the user's friend list
	Friends = NewKey[[]*types.ExtendedFriend]("Friends")
	// Presences stores friend presence information
	Presences = NewKey[map[uint64]*apiTypes.UserPresenceResponse]("Presences")
	// FlaggedFriends stores flagged friends
	FlaggedFriends = NewKey[map[uint64]*types.ReviewUser]("FlaggedFriends")
	// Groups stores the list of groups
	Groups = NewKey[[]*apiTypes.UserGroupRoles]("Groups")
	// FlaggedGroups stores flagged groups
	FlaggedGroups = NewKey[map[uint64]*types.ReviewGroup]("FlaggedGroups")
	// GroupTarget stores the currently selected group
	GroupTarget = NewKey[*types.ReviewGroup]("GroupTarget")
	// GroupMemberIDs stores member IDs for the current group
	GroupMemberIDs = NewKey[[]uint64]("GroupMemberIDs")
	// GroupMembers stores member details for the current group
	GroupMembers = NewKey[map[uint64]*types.ReviewUser]("GroupMembers")
	// GroupPageMembers stores the current page of group members
	GroupPageMembers = NewKey[[]uint64]("GroupPageMembers")
	// GroupInfo stores additional group information
	GroupInfo = NewKey[*apiTypes.GroupResponse]("GroupInfo")
	// Outfits stores user outfits
	Outfits = NewKey[[]apiTypes.Outfit]("Outfits")
	// ChatHistory stores the conversation history
	ChatHistory = NewKey[ai.ChatHistory]("ChatHistory")
	// ChatContext stores chat context information
	ChatContext = NewKey[string]("ChatContext")
	// Logs stores activity logs
	Logs = NewKey[[]*types.ActivityLog]("Logs")
	// LogCursor stores the current log cursor
	LogCursor = NewKey[*types.LogCursor]("LogCursor")
	// LogNextCursor stores the next log cursor
	LogNextCursor = NewKey[*types.LogCursor]("LogNextCursor")
	// LogPrevCursors stores previous log cursors
	LogPrevCursors = NewKey[[]*types.LogCursor]("LogPrevCursors")
	// DiscordIDFilter stores Discord ID filter
	DiscordIDFilter = NewKey[uint64]("DiscordIDFilter")
	// UserIDFilter stores user ID filter
	UserIDFilter = NewKey[uint64]("UserIDFilter")
	// GroupIDFilter stores group ID filter
	GroupIDFilter = NewKey[uint64]("GroupIDFilter")
	// ReviewerIDFilter stores reviewer ID filter
	ReviewerIDFilter = NewKey[uint64]("ReviewerIDFilter")
	// ActivityTypeFilter stores activity type filter
	ActivityTypeFilter = NewKey[enum.ActivityType]("ActivityTypeFilter")
	// DateRangeStartFilter stores start date filter
	DateRangeStartFilter = NewKey[time.Time]("DateRangeStartFilter")
	// DateRangeEndFilter stores end date filter
	DateRangeEndFilter = NewKey[time.Time]("DateRangeEndFilter")
	// QueueUser stores the queued user
	QueueUser = NewKey[uint64]("QueueUser")
	// QueueStatus stores the queue status
	QueueStatus = NewKey[string]("QueueStatus")
	// QueuePriority stores the queue priority
	QueuePriority = NewKey[string]("QueuePriority")
	// QueuePosition stores the queue position
	QueuePosition = NewKey[int]("QueuePosition")
	// QueueHighCount stores high priority queue count
	QueueHighCount = NewKey[int]("QueueHighCount")
	// QueueNormalCount stores normal priority queue count
	QueueNormalCount = NewKey[int]("QueueNormalCount")
	// QueueLowCount stores low priority queue count
	QueueLowCount = NewKey[int]("QueueLowCount")
	// Appeals stores the current page of appeals
	Appeals = NewKey[[]*types.Appeal]("Appeals")
	// Appeal stores the currently selected appeal
	Appeal = NewKey[*types.Appeal]("Appeal")
	// AppealMessages stores messages for the current appeal
	AppealMessages = NewKey[[]*types.AppealMessage]("AppealMessages")
	// AppealCursor stores the current cursor position
	AppealCursor = NewKey[*types.AppealTimeline]("AppealCursor")
	// AppealNextCursor stores the next cursor position
	AppealNextCursor = NewKey[*types.AppealTimeline]("AppealNextCursor")
	// AppealPrevCursors stores previous cursor positions
	AppealPrevCursors = NewKey[[]*types.AppealTimeline]("AppealPrevCursors")
	// VerifyUserID stores the user ID being verified
	VerifyUserID = NewKey[uint64]("VerifyUserID")
	// VerifyReason stores the verification reason
	VerifyReason = NewKey[string]("VerifyReason")
	// VerifyCode stores the verification code
	VerifyCode = NewKey[string]("VerifyCode")
	// CaptchaAnswer stores the CAPTCHA answer
	CaptchaAnswer = NewKey[string]("CaptchaAnswer")
	// AdminAction stores the current admin action
	AdminAction = NewKey[string]("AdminAction")
	// AdminActionID stores the admin action ID
	AdminActionID = NewKey[string]("AdminActionID")
	// AdminReason stores the admin action reason
	AdminReason = NewKey[string]("AdminReason")
	// BanReason stores the ban reason
	BanReason = NewKey[enum.BanReason]("BanReason")
	// BanExpiry stores the ban expiry time
	BanExpiry = NewKey[*time.Time]("BanExpiry")
	// BanInfo stores ban information
	BanInfo = NewKey[*types.DiscordBan]("BanInfo")
	// LeaderboardStats stores leaderboard statistics
	LeaderboardStats = NewKey[[]*types.VoteAccuracy]("LeaderboardStats")
	// LeaderboardUsernames stores usernames for the leaderboard
	LeaderboardUsernames = NewKey[map[uint64]string]("LeaderboardUsernames")
	// LeaderboardCursor stores the current leaderboard cursor
	LeaderboardCursor = NewKey[*types.LeaderboardCursor]("LeaderboardCursor")
	// LeaderboardNextCursor stores the next leaderboard cursor
	LeaderboardNextCursor = NewKey[*types.LeaderboardCursor]("LeaderboardNextCursor")
	// LeaderboardPrevCursors stores previous leaderboard cursors
	LeaderboardPrevCursors = NewKey[[]*types.LeaderboardCursor]("LeaderboardPrevCursors")
	// LeaderboardLastRefresh stores the last refresh time
	LeaderboardLastRefresh = NewKey[time.Time]("LeaderboardLastRefresh")
	// LeaderboardNextRefresh stores the next refresh time
	LeaderboardNextRefresh = NewKey[time.Time]("LeaderboardNextRefresh")

	// ImageBuffer stores binary image data
	ImageBuffer = NewBufferKey("ImageBuffer")
	// CaptchaImage stores the CAPTCHA image data
	CaptchaImage = NewBufferKey("CaptchaImage")
)
