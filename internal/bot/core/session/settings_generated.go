// Code generated by go generate; DO NOT EDIT.
package session

import (
	"time"

	"github.com/robalyx/rotector/internal/database/types/enum"
)

var (

	// StreamerMode controls streamer-friendly display
	UserStreamerMode = NewUserSettingKey("StreamerMode", func(s *Session) bool {
		return s.userSettings.StreamerMode
	}, func(s *Session, value bool) {
		s.userSettings.StreamerMode = value
		s.userSettingsUpdate = true
	})

	// UserDefaultSort sets default user review sorting
	UserUserDefaultSort = NewUserSettingKey("UserDefaultSort", func(s *Session) enum.ReviewSortBy {
		return s.userSettings.UserDefaultSort
	}, func(s *Session, value enum.ReviewSortBy) {
		s.userSettings.UserDefaultSort = value
		s.userSettingsUpdate = true
	})

	// GroupDefaultSort sets default group review sorting
	UserGroupDefaultSort = NewUserSettingKey("GroupDefaultSort", func(s *Session) enum.ReviewSortBy {
		return s.userSettings.GroupDefaultSort
	}, func(s *Session, value enum.ReviewSortBy) {
		s.userSettings.GroupDefaultSort = value
		s.userSettingsUpdate = true
	})

	// ChatModel sets the AI chat model
	UserChatModel = NewUserSettingKey("ChatModel", func(s *Session) enum.ChatModel {
		return s.userSettings.ChatModel
	}, func(s *Session, value enum.ChatModel) {
		s.userSettings.ChatModel = value
		s.userSettingsUpdate = true
	})

	// ReviewMode sets the review mode
	UserReviewMode = NewUserSettingKey("ReviewMode", func(s *Session) enum.ReviewMode {
		return s.userSettings.ReviewMode
	}, func(s *Session, value enum.ReviewMode) {
		s.userSettings.ReviewMode = value
		s.userSettingsUpdate = true
	})

	// ReviewTargetMode sets the review target mode
	UserReviewTargetMode = NewUserSettingKey("ReviewTargetMode", func(s *Session) enum.ReviewTargetMode {
		return s.userSettings.ReviewTargetMode
	}, func(s *Session, value enum.ReviewTargetMode) {
		s.userSettings.ReviewTargetMode = value
		s.userSettingsUpdate = true
	})

	// ReviewerStatsPeriod sets the reviewer stats time period
	UserReviewerStatsPeriod = NewUserSettingKey("ReviewerStatsPeriod", func(s *Session) enum.ReviewerStatsPeriod {
		return s.userSettings.ReviewerStatsPeriod
	}, func(s *Session, value enum.ReviewerStatsPeriod) {
		s.userSettings.ReviewerStatsPeriod = value
		s.userSettingsUpdate = true
	})

	// ChatMessageUsageFirstMessageTime tracks first message time in 24h period
	UserChatMessageUsageFirstMessageTime = NewUserSettingKey("ChatMessageUsage.FirstMessageTime", func(s *Session) time.Time {
		return s.userSettings.ChatMessageUsage.FirstMessageTime
	}, func(s *Session, value time.Time) {
		s.userSettings.ChatMessageUsage.FirstMessageTime = value
		s.userSettingsUpdate = true
	})

	// ChatMessageUsageMessageCount tracks message count in 24h period
	UserChatMessageUsageMessageCount = NewUserSettingKey("ChatMessageUsage.MessageCount", func(s *Session) int {
		return s.userSettings.ChatMessageUsage.MessageCount
	}, func(s *Session, value int) {
		s.userSettings.ChatMessageUsage.MessageCount = value
		s.userSettingsUpdate = true
	})

	// CaptchaUsageCaptchaReviewCount tracks reviews since last CAPTCHA
	UserCaptchaUsageCaptchaReviewCount = NewUserSettingKey("CaptchaUsage.CaptchaReviewCount", func(s *Session) int {
		return s.userSettings.CaptchaUsage.CaptchaReviewCount
	}, func(s *Session, value int) {
		s.userSettings.CaptchaUsage.CaptchaReviewCount = value
		s.userSettingsUpdate = true
	})

	// ReviewBreakNextReviewTime tracks when user can resume reviewing
	UserReviewBreakNextReviewTime = NewUserSettingKey("ReviewBreak.NextReviewTime", func(s *Session) time.Time {
		return s.userSettings.ReviewBreak.NextReviewTime
	}, func(s *Session, value time.Time) {
		s.userSettings.ReviewBreak.NextReviewTime = value
		s.userSettingsUpdate = true
	})

	// ReviewBreakReviewCount tracks reviews in current window
	UserReviewBreakReviewCount = NewUserSettingKey("ReviewBreak.ReviewCount", func(s *Session) int {
		return s.userSettings.ReviewBreak.ReviewCount
	}, func(s *Session, value int) {
		s.userSettings.ReviewBreak.ReviewCount = value
		s.userSettingsUpdate = true
	})

	// ReviewBreakWindowStartTime tracks start of current review window
	UserReviewBreakWindowStartTime = NewUserSettingKey("ReviewBreak.WindowStartTime", func(s *Session) time.Time {
		return s.userSettings.ReviewBreak.WindowStartTime
	}, func(s *Session, value time.Time) {
		s.userSettings.ReviewBreak.WindowStartTime = value
		s.userSettingsUpdate = true
	})

	// ReviewerIDs stores authorized reviewer IDs
	BotReviewerIDs = NewBotSettingKey("ReviewerIDs", func(s *Session) []uint64 {
		return s.botSettings.ReviewerIDs
	}, func(s *Session, value []uint64) {
		s.botSettings.ReviewerIDs = value
		s.botSettings.ReviewerMap = nil // Clear cached map
		s.botSettingsUpdate = true
	})

	// AdminIDs stores authorized admin IDs
	BotAdminIDs = NewBotSettingKey("AdminIDs", func(s *Session) []uint64 {
		return s.botSettings.AdminIDs
	}, func(s *Session, value []uint64) {
		s.botSettings.AdminIDs = value
		s.botSettings.AdminMap = nil // Clear cached map
		s.botSettingsUpdate = true
	})

	// SessionLimit sets maximum concurrent sessions
	BotSessionLimit = NewBotSettingKey("SessionLimit", func(s *Session) uint64 {
		return s.botSettings.SessionLimit
	}, func(s *Session, value uint64) {
		s.botSettings.SessionLimit = value
		s.botSettingsUpdate = true
	})

	// WelcomeMessage sets the welcome message
	BotWelcomeMessage = NewBotSettingKey("WelcomeMessage", func(s *Session) string {
		return s.botSettings.WelcomeMessage
	}, func(s *Session, value string) {
		s.botSettings.WelcomeMessage = value
		s.botSettingsUpdate = true
	})

	// AnnouncementType sets the announcement type
	BotAnnouncementType = NewBotSettingKey("Announcement.Type", func(s *Session) enum.AnnouncementType {
		return s.botSettings.Announcement.Type
	}, func(s *Session, value enum.AnnouncementType) {
		s.botSettings.Announcement.Type = value
		s.botSettingsUpdate = true
	})

	// AnnouncementMessage sets the announcement message
	BotAnnouncementMessage = NewBotSettingKey("Announcement.Message", func(s *Session) string {
		return s.botSettings.Announcement.Message
	}, func(s *Session, value string) {
		s.botSettings.Announcement.Message = value
		s.botSettingsUpdate = true
	})
)
