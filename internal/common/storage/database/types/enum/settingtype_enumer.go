// Code generated by "enumer -type=SettingType -trimprefix=SettingType"; DO NOT EDIT.

package enum

import (
	"fmt"
	"strings"
)

const _SettingTypeName = "BoolEnumIDNumberTextAPIKey"

var _SettingTypeIndex = [...]uint8{0, 4, 8, 10, 16, 20, 26}

const _SettingTypeLowerName = "boolenumidnumbertextapikey"

func (i SettingType) String() string {
	if i < 0 || i >= SettingType(len(_SettingTypeIndex)-1) {
		return fmt.Sprintf("SettingType(%d)", i)
	}
	return _SettingTypeName[_SettingTypeIndex[i]:_SettingTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SettingTypeNoOp() {
	var x [1]struct{}
	_ = x[SettingTypeBool-(0)]
	_ = x[SettingTypeEnum-(1)]
	_ = x[SettingTypeID-(2)]
	_ = x[SettingTypeNumber-(3)]
	_ = x[SettingTypeText-(4)]
	_ = x[SettingTypeAPIKey-(5)]
}

var _SettingTypeValues = []SettingType{SettingTypeBool, SettingTypeEnum, SettingTypeID, SettingTypeNumber, SettingTypeText, SettingTypeAPIKey}

var _SettingTypeNameToValueMap = map[string]SettingType{
	_SettingTypeName[0:4]:        SettingTypeBool,
	_SettingTypeLowerName[0:4]:   SettingTypeBool,
	_SettingTypeName[4:8]:        SettingTypeEnum,
	_SettingTypeLowerName[4:8]:   SettingTypeEnum,
	_SettingTypeName[8:10]:       SettingTypeID,
	_SettingTypeLowerName[8:10]:  SettingTypeID,
	_SettingTypeName[10:16]:      SettingTypeNumber,
	_SettingTypeLowerName[10:16]: SettingTypeNumber,
	_SettingTypeName[16:20]:      SettingTypeText,
	_SettingTypeLowerName[16:20]: SettingTypeText,
	_SettingTypeName[20:26]:      SettingTypeAPIKey,
	_SettingTypeLowerName[20:26]: SettingTypeAPIKey,
}

var _SettingTypeNames = []string{
	_SettingTypeName[0:4],
	_SettingTypeName[4:8],
	_SettingTypeName[8:10],
	_SettingTypeName[10:16],
	_SettingTypeName[16:20],
	_SettingTypeName[20:26],
}

// SettingTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SettingTypeString(s string) (SettingType, error) {
	if val, ok := _SettingTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SettingTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SettingType values", s)
}

// SettingTypeValues returns all values of the enum
func SettingTypeValues() []SettingType {
	return _SettingTypeValues
}

// SettingTypeStrings returns a slice of all String values of the enum
func SettingTypeStrings() []string {
	strs := make([]string, len(_SettingTypeNames))
	copy(strs, _SettingTypeNames)
	return strs
}

// IsASettingType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SettingType) IsASettingType() bool {
	for _, v := range _SettingTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
