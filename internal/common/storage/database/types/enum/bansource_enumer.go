// Code generated by "enumer -type=BanSource -trimprefix=BanSource"; DO NOT EDIT.

package enum

import (
	"fmt"
	"strings"
)

const _BanSourceName = "SystemAdmin"

var _BanSourceIndex = [...]uint8{0, 6, 11}

const _BanSourceLowerName = "systemadmin"

func (i BanSource) String() string {
	if i < 0 || i >= BanSource(len(_BanSourceIndex)-1) {
		return fmt.Sprintf("BanSource(%d)", i)
	}
	return _BanSourceName[_BanSourceIndex[i]:_BanSourceIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BanSourceNoOp() {
	var x [1]struct{}
	_ = x[BanSourceSystem-(0)]
	_ = x[BanSourceAdmin-(1)]
}

var _BanSourceValues = []BanSource{BanSourceSystem, BanSourceAdmin}

var _BanSourceNameToValueMap = map[string]BanSource{
	_BanSourceName[0:6]:       BanSourceSystem,
	_BanSourceLowerName[0:6]:  BanSourceSystem,
	_BanSourceName[6:11]:      BanSourceAdmin,
	_BanSourceLowerName[6:11]: BanSourceAdmin,
}

var _BanSourceNames = []string{
	_BanSourceName[0:6],
	_BanSourceName[6:11],
}

// BanSourceString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BanSourceString(s string) (BanSource, error) {
	if val, ok := _BanSourceNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BanSourceNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BanSource values", s)
}

// BanSourceValues returns all values of the enum
func BanSourceValues() []BanSource {
	return _BanSourceValues
}

// BanSourceStrings returns a slice of all String values of the enum
func BanSourceStrings() []string {
	strs := make([]string, len(_BanSourceNames))
	copy(strs, _BanSourceNames)
	return strs
}

// IsABanSource returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BanSource) IsABanSource() bool {
	for _, v := range _BanSourceValues {
		if i == v {
			return true
		}
	}
	return false
}
