// Code generated by "enumer -type=GroupReasonType -trimprefix=GroupReasonType"; DO NOT EDIT.

package enum

import (
	"fmt"
	"strings"
)

const _GroupReasonTypeName = "Member"

var _GroupReasonTypeIndex = [...]uint8{0, 6}

const _GroupReasonTypeLowerName = "member"

func (i GroupReasonType) String() string {
	if i < 0 || i >= GroupReasonType(len(_GroupReasonTypeIndex)-1) {
		return fmt.Sprintf("GroupReasonType(%d)", i)
	}
	return _GroupReasonTypeName[_GroupReasonTypeIndex[i]:_GroupReasonTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _GroupReasonTypeNoOp() {
	var x [1]struct{}
	_ = x[GroupReasonTypeMember-(0)]
}

var _GroupReasonTypeValues = []GroupReasonType{GroupReasonTypeMember}

var _GroupReasonTypeNameToValueMap = map[string]GroupReasonType{
	_GroupReasonTypeName[0:6]:      GroupReasonTypeMember,
	_GroupReasonTypeLowerName[0:6]: GroupReasonTypeMember,
}

var _GroupReasonTypeNames = []string{
	_GroupReasonTypeName[0:6],
}

// GroupReasonTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func GroupReasonTypeString(s string) (GroupReasonType, error) {
	if val, ok := _GroupReasonTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _GroupReasonTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to GroupReasonType values", s)
}

// GroupReasonTypeValues returns all values of the enum
func GroupReasonTypeValues() []GroupReasonType {
	return _GroupReasonTypeValues
}

// GroupReasonTypeStrings returns a slice of all String values of the enum
func GroupReasonTypeStrings() []string {
	strs := make([]string, len(_GroupReasonTypeNames))
	copy(strs, _GroupReasonTypeNames)
	return strs
}

// IsAGroupReasonType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i GroupReasonType) IsAGroupReasonType() bool {
	for _, v := range _GroupReasonTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
