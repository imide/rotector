// Code generated by "enumer -type=AnnouncementType -trimprefix=AnnouncementType"; DO NOT EDIT.

package enum

import (
	"fmt"
	"strings"
)

const _AnnouncementTypeName = "NoneInfoWarningSuccessError"

var _AnnouncementTypeIndex = [...]uint8{0, 4, 8, 15, 22, 27}

const _AnnouncementTypeLowerName = "noneinfowarningsuccesserror"

func (i AnnouncementType) String() string {
	if i < 0 || i >= AnnouncementType(len(_AnnouncementTypeIndex)-1) {
		return fmt.Sprintf("AnnouncementType(%d)", i)
	}
	return _AnnouncementTypeName[_AnnouncementTypeIndex[i]:_AnnouncementTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AnnouncementTypeNoOp() {
	var x [1]struct{}
	_ = x[AnnouncementTypeNone-(0)]
	_ = x[AnnouncementTypeInfo-(1)]
	_ = x[AnnouncementTypeWarning-(2)]
	_ = x[AnnouncementTypeSuccess-(3)]
	_ = x[AnnouncementTypeError-(4)]
}

var _AnnouncementTypeValues = []AnnouncementType{AnnouncementTypeNone, AnnouncementTypeInfo, AnnouncementTypeWarning, AnnouncementTypeSuccess, AnnouncementTypeError}

var _AnnouncementTypeNameToValueMap = map[string]AnnouncementType{
	_AnnouncementTypeName[0:4]:        AnnouncementTypeNone,
	_AnnouncementTypeLowerName[0:4]:   AnnouncementTypeNone,
	_AnnouncementTypeName[4:8]:        AnnouncementTypeInfo,
	_AnnouncementTypeLowerName[4:8]:   AnnouncementTypeInfo,
	_AnnouncementTypeName[8:15]:       AnnouncementTypeWarning,
	_AnnouncementTypeLowerName[8:15]:  AnnouncementTypeWarning,
	_AnnouncementTypeName[15:22]:      AnnouncementTypeSuccess,
	_AnnouncementTypeLowerName[15:22]: AnnouncementTypeSuccess,
	_AnnouncementTypeName[22:27]:      AnnouncementTypeError,
	_AnnouncementTypeLowerName[22:27]: AnnouncementTypeError,
}

var _AnnouncementTypeNames = []string{
	_AnnouncementTypeName[0:4],
	_AnnouncementTypeName[4:8],
	_AnnouncementTypeName[8:15],
	_AnnouncementTypeName[15:22],
	_AnnouncementTypeName[22:27],
}

// AnnouncementTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AnnouncementTypeString(s string) (AnnouncementType, error) {
	if val, ok := _AnnouncementTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AnnouncementTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AnnouncementType values", s)
}

// AnnouncementTypeValues returns all values of the enum
func AnnouncementTypeValues() []AnnouncementType {
	return _AnnouncementTypeValues
}

// AnnouncementTypeStrings returns a slice of all String values of the enum
func AnnouncementTypeStrings() []string {
	strs := make([]string, len(_AnnouncementTypeNames))
	copy(strs, _AnnouncementTypeNames)
	return strs
}

// IsAAnnouncementType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AnnouncementType) IsAAnnouncementType() bool {
	for _, v := range _AnnouncementTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
