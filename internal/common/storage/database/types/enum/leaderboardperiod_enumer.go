// Code generated by "enumer -type=LeaderboardPeriod -trimprefix=LeaderboardPeriod"; DO NOT EDIT.

package enum

import (
	"fmt"
	"strings"
)

const _LeaderboardPeriodName = "DailyWeeklyBiWeeklyMonthlyBiAnnuallyAnnuallyAllTime"

var _LeaderboardPeriodIndex = [...]uint8{0, 5, 11, 19, 26, 36, 44, 51}

const _LeaderboardPeriodLowerName = "dailyweeklybiweeklymonthlybiannuallyannuallyalltime"

func (i LeaderboardPeriod) String() string {
	if i < 0 || i >= LeaderboardPeriod(len(_LeaderboardPeriodIndex)-1) {
		return fmt.Sprintf("LeaderboardPeriod(%d)", i)
	}
	return _LeaderboardPeriodName[_LeaderboardPeriodIndex[i]:_LeaderboardPeriodIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LeaderboardPeriodNoOp() {
	var x [1]struct{}
	_ = x[LeaderboardPeriodDaily-(0)]
	_ = x[LeaderboardPeriodWeekly-(1)]
	_ = x[LeaderboardPeriodBiWeekly-(2)]
	_ = x[LeaderboardPeriodMonthly-(3)]
	_ = x[LeaderboardPeriodBiAnnually-(4)]
	_ = x[LeaderboardPeriodAnnually-(5)]
	_ = x[LeaderboardPeriodAllTime-(6)]
}

var _LeaderboardPeriodValues = []LeaderboardPeriod{LeaderboardPeriodDaily, LeaderboardPeriodWeekly, LeaderboardPeriodBiWeekly, LeaderboardPeriodMonthly, LeaderboardPeriodBiAnnually, LeaderboardPeriodAnnually, LeaderboardPeriodAllTime}

var _LeaderboardPeriodNameToValueMap = map[string]LeaderboardPeriod{
	_LeaderboardPeriodName[0:5]:        LeaderboardPeriodDaily,
	_LeaderboardPeriodLowerName[0:5]:   LeaderboardPeriodDaily,
	_LeaderboardPeriodName[5:11]:       LeaderboardPeriodWeekly,
	_LeaderboardPeriodLowerName[5:11]:  LeaderboardPeriodWeekly,
	_LeaderboardPeriodName[11:19]:      LeaderboardPeriodBiWeekly,
	_LeaderboardPeriodLowerName[11:19]: LeaderboardPeriodBiWeekly,
	_LeaderboardPeriodName[19:26]:      LeaderboardPeriodMonthly,
	_LeaderboardPeriodLowerName[19:26]: LeaderboardPeriodMonthly,
	_LeaderboardPeriodName[26:36]:      LeaderboardPeriodBiAnnually,
	_LeaderboardPeriodLowerName[26:36]: LeaderboardPeriodBiAnnually,
	_LeaderboardPeriodName[36:44]:      LeaderboardPeriodAnnually,
	_LeaderboardPeriodLowerName[36:44]: LeaderboardPeriodAnnually,
	_LeaderboardPeriodName[44:51]:      LeaderboardPeriodAllTime,
	_LeaderboardPeriodLowerName[44:51]: LeaderboardPeriodAllTime,
}

var _LeaderboardPeriodNames = []string{
	_LeaderboardPeriodName[0:5],
	_LeaderboardPeriodName[5:11],
	_LeaderboardPeriodName[11:19],
	_LeaderboardPeriodName[19:26],
	_LeaderboardPeriodName[26:36],
	_LeaderboardPeriodName[36:44],
	_LeaderboardPeriodName[44:51],
}

// LeaderboardPeriodString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LeaderboardPeriodString(s string) (LeaderboardPeriod, error) {
	if val, ok := _LeaderboardPeriodNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LeaderboardPeriodNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LeaderboardPeriod values", s)
}

// LeaderboardPeriodValues returns all values of the enum
func LeaderboardPeriodValues() []LeaderboardPeriod {
	return _LeaderboardPeriodValues
}

// LeaderboardPeriodStrings returns a slice of all String values of the enum
func LeaderboardPeriodStrings() []string {
	strs := make([]string, len(_LeaderboardPeriodNames))
	copy(strs, _LeaderboardPeriodNames)
	return strs
}

// IsALeaderboardPeriod returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LeaderboardPeriod) IsALeaderboardPeriod() bool {
	for _, v := range _LeaderboardPeriodValues {
		if i == v {
			return true
		}
	}
	return false
}
