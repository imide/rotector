// Code generated by "enumer -type=ChatModel -trimprefix=ChatModel -linecomment"; DO NOT EDIT.

package enum

import (
	"fmt"
	"strings"
)

const _ChatModelName = "gemini-2.0-flashgemini-2.5-prodeepseek-r1deepseek-v3-0324gpt-4o-mini"

var _ChatModelIndex = [...]uint8{0, 16, 30, 41, 57, 68}

const _ChatModelLowerName = "gemini-2.0-flashgemini-2.5-prodeepseek-r1deepseek-v3-0324gpt-4o-mini"

func (i ChatModel) String() string {
	if i < 0 || i >= ChatModel(len(_ChatModelIndex)-1) {
		return fmt.Sprintf("ChatModel(%d)", i)
	}
	return _ChatModelName[_ChatModelIndex[i]:_ChatModelIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ChatModelNoOp() {
	var x [1]struct{}
	_ = x[ChatModelGemini2_0Flash-(0)]
	_ = x[ChatModelGemini2_5Pro-(1)]
	_ = x[ChatModelDeepseekR1-(2)]
	_ = x[ChatModelDeepseekV3_0324-(3)]
	_ = x[ChatModelGPT4oMini-(4)]
}

var _ChatModelValues = []ChatModel{ChatModelGemini2_0Flash, ChatModelGemini2_5Pro, ChatModelDeepseekR1, ChatModelDeepseekV3_0324, ChatModelGPT4oMini}

var _ChatModelNameToValueMap = map[string]ChatModel{
	_ChatModelName[0:16]:       ChatModelGemini2_0Flash,
	_ChatModelLowerName[0:16]:  ChatModelGemini2_0Flash,
	_ChatModelName[16:30]:      ChatModelGemini2_5Pro,
	_ChatModelLowerName[16:30]: ChatModelGemini2_5Pro,
	_ChatModelName[30:41]:      ChatModelDeepseekR1,
	_ChatModelLowerName[30:41]: ChatModelDeepseekR1,
	_ChatModelName[41:57]:      ChatModelDeepseekV3_0324,
	_ChatModelLowerName[41:57]: ChatModelDeepseekV3_0324,
	_ChatModelName[57:68]:      ChatModelGPT4oMini,
	_ChatModelLowerName[57:68]: ChatModelGPT4oMini,
}

var _ChatModelNames = []string{
	_ChatModelName[0:16],
	_ChatModelName[16:30],
	_ChatModelName[30:41],
	_ChatModelName[41:57],
	_ChatModelName[57:68],
}

// ChatModelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ChatModelString(s string) (ChatModel, error) {
	if val, ok := _ChatModelNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ChatModelNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ChatModel values", s)
}

// ChatModelValues returns all values of the enum
func ChatModelValues() []ChatModel {
	return _ChatModelValues
}

// ChatModelStrings returns a slice of all String values of the enum
func ChatModelStrings() []string {
	strs := make([]string, len(_ChatModelNames))
	copy(strs, _ChatModelNames)
	return strs
}

// IsAChatModel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ChatModel) IsAChatModel() bool {
	for _, v := range _ChatModelValues {
		if i == v {
			return true
		}
	}
	return false
}
