// Code generated by "enumer -type=VoteType -trimprefix=VoteType"; DO NOT EDIT.

package enum

import (
	"fmt"
	"strings"
)

const _VoteTypeName = "UserGroup"

var _VoteTypeIndex = [...]uint8{0, 4, 9}

const _VoteTypeLowerName = "usergroup"

func (i VoteType) String() string {
	if i < 0 || i >= VoteType(len(_VoteTypeIndex)-1) {
		return fmt.Sprintf("VoteType(%d)", i)
	}
	return _VoteTypeName[_VoteTypeIndex[i]:_VoteTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _VoteTypeNoOp() {
	var x [1]struct{}
	_ = x[VoteTypeUser-(0)]
	_ = x[VoteTypeGroup-(1)]
}

var _VoteTypeValues = []VoteType{VoteTypeUser, VoteTypeGroup}

var _VoteTypeNameToValueMap = map[string]VoteType{
	_VoteTypeName[0:4]:      VoteTypeUser,
	_VoteTypeLowerName[0:4]: VoteTypeUser,
	_VoteTypeName[4:9]:      VoteTypeGroup,
	_VoteTypeLowerName[4:9]: VoteTypeGroup,
}

var _VoteTypeNames = []string{
	_VoteTypeName[0:4],
	_VoteTypeName[4:9],
}

// VoteTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VoteTypeString(s string) (VoteType, error) {
	if val, ok := _VoteTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _VoteTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to VoteType values", s)
}

// VoteTypeValues returns all values of the enum
func VoteTypeValues() []VoteType {
	return _VoteTypeValues
}

// VoteTypeStrings returns a slice of all String values of the enum
func VoteTypeStrings() []string {
	strs := make([]string, len(_VoteTypeNames))
	copy(strs, _VoteTypeNames)
	return strs
}

// IsAVoteType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i VoteType) IsAVoteType() bool {
	for _, v := range _VoteTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
