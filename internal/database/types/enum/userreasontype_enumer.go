// Code generated by "enumer -type=UserReasonType -trimprefix=UserReasonType"; DO NOT EDIT.

package enum

import (
	"fmt"
	"strings"
)

const _UserReasonTypeName = "DescriptionFriendOutfitGroupCondo"

var _UserReasonTypeIndex = [...]uint8{0, 11, 17, 23, 28, 33}

const _UserReasonTypeLowerName = "descriptionfriendoutfitgroupcondo"

func (i UserReasonType) String() string {
	if i < 0 || i >= UserReasonType(len(_UserReasonTypeIndex)-1) {
		return fmt.Sprintf("UserReasonType(%d)", i)
	}
	return _UserReasonTypeName[_UserReasonTypeIndex[i]:_UserReasonTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _UserReasonTypeNoOp() {
	var x [1]struct{}
	_ = x[UserReasonTypeDescription-(0)]
	_ = x[UserReasonTypeFriend-(1)]
	_ = x[UserReasonTypeOutfit-(2)]
	_ = x[UserReasonTypeGroup-(3)]
	_ = x[UserReasonTypeCondo-(4)]
}

var _UserReasonTypeValues = []UserReasonType{UserReasonTypeDescription, UserReasonTypeFriend, UserReasonTypeOutfit, UserReasonTypeGroup, UserReasonTypeCondo}

var _UserReasonTypeNameToValueMap = map[string]UserReasonType{
	_UserReasonTypeName[0:11]:       UserReasonTypeDescription,
	_UserReasonTypeLowerName[0:11]:  UserReasonTypeDescription,
	_UserReasonTypeName[11:17]:      UserReasonTypeFriend,
	_UserReasonTypeLowerName[11:17]: UserReasonTypeFriend,
	_UserReasonTypeName[17:23]:      UserReasonTypeOutfit,
	_UserReasonTypeLowerName[17:23]: UserReasonTypeOutfit,
	_UserReasonTypeName[23:28]:      UserReasonTypeGroup,
	_UserReasonTypeLowerName[23:28]: UserReasonTypeGroup,
	_UserReasonTypeName[28:33]:      UserReasonTypeCondo,
	_UserReasonTypeLowerName[28:33]: UserReasonTypeCondo,
}

var _UserReasonTypeNames = []string{
	_UserReasonTypeName[0:11],
	_UserReasonTypeName[11:17],
	_UserReasonTypeName[17:23],
	_UserReasonTypeName[23:28],
	_UserReasonTypeName[28:33],
}

// UserReasonTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UserReasonTypeString(s string) (UserReasonType, error) {
	if val, ok := _UserReasonTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _UserReasonTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to UserReasonType values", s)
}

// UserReasonTypeValues returns all values of the enum
func UserReasonTypeValues() []UserReasonType {
	return _UserReasonTypeValues
}

// UserReasonTypeStrings returns a slice of all String values of the enum
func UserReasonTypeStrings() []string {
	strs := make([]string, len(_UserReasonTypeNames))
	copy(strs, _UserReasonTypeNames)
	return strs
}

// IsAUserReasonType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i UserReasonType) IsAUserReasonType() bool {
	for _, v := range _UserReasonTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
