// Code generated by "enumer -type=BanReason -trimprefix=BanReason"; DO NOT EDIT.

package enum

import (
	"fmt"
	"strings"
)

const _BanReasonName = "AbuseInappropriateOther"

var _BanReasonIndex = [...]uint8{0, 5, 18, 23}

const _BanReasonLowerName = "abuseinappropriateother"

func (i BanReason) String() string {
	if i < 0 || i >= BanReason(len(_BanReasonIndex)-1) {
		return fmt.Sprintf("BanReason(%d)", i)
	}
	return _BanReasonName[_BanReasonIndex[i]:_BanReasonIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BanReasonNoOp() {
	var x [1]struct{}
	_ = x[BanReasonAbuse-(0)]
	_ = x[BanReasonInappropriate-(1)]
	_ = x[BanReasonOther-(2)]
}

var _BanReasonValues = []BanReason{BanReasonAbuse, BanReasonInappropriate, BanReasonOther}

var _BanReasonNameToValueMap = map[string]BanReason{
	_BanReasonName[0:5]:        BanReasonAbuse,
	_BanReasonLowerName[0:5]:   BanReasonAbuse,
	_BanReasonName[5:18]:       BanReasonInappropriate,
	_BanReasonLowerName[5:18]:  BanReasonInappropriate,
	_BanReasonName[18:23]:      BanReasonOther,
	_BanReasonLowerName[18:23]: BanReasonOther,
}

var _BanReasonNames = []string{
	_BanReasonName[0:5],
	_BanReasonName[5:18],
	_BanReasonName[18:23],
}

// BanReasonString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BanReasonString(s string) (BanReason, error) {
	if val, ok := _BanReasonNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BanReasonNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BanReason values", s)
}

// BanReasonValues returns all values of the enum
func BanReasonValues() []BanReason {
	return _BanReasonValues
}

// BanReasonStrings returns a slice of all String values of the enum
func BanReasonStrings() []string {
	strs := make([]string, len(_BanReasonNames))
	copy(strs, _BanReasonNames)
	return strs
}

// IsABanReason returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BanReason) IsABanReason() bool {
	for _, v := range _BanReasonValues {
		if i == v {
			return true
		}
	}
	return false
}
