// Code generated by "enumer -type=GroupType -trimprefix=GroupType"; DO NOT EDIT.

package enum

import (
	"fmt"
	"strings"
)

const _GroupTypeName = "ClearedFlaggedConfirmed"

var _GroupTypeIndex = [...]uint8{0, 7, 14, 23}

const _GroupTypeLowerName = "clearedflaggedconfirmed"

func (i GroupType) String() string {
	if i < 0 || i >= GroupType(len(_GroupTypeIndex)-1) {
		return fmt.Sprintf("GroupType(%d)", i)
	}
	return _GroupTypeName[_GroupTypeIndex[i]:_GroupTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _GroupTypeNoOp() {
	var x [1]struct{}
	_ = x[GroupTypeCleared-(0)]
	_ = x[GroupTypeFlagged-(1)]
	_ = x[GroupTypeConfirmed-(2)]
}

var _GroupTypeValues = []GroupType{GroupTypeCleared, GroupTypeFlagged, GroupTypeConfirmed}

var _GroupTypeNameToValueMap = map[string]GroupType{
	_GroupTypeName[0:7]:        GroupTypeCleared,
	_GroupTypeLowerName[0:7]:   GroupTypeCleared,
	_GroupTypeName[7:14]:       GroupTypeFlagged,
	_GroupTypeLowerName[7:14]:  GroupTypeFlagged,
	_GroupTypeName[14:23]:      GroupTypeConfirmed,
	_GroupTypeLowerName[14:23]: GroupTypeConfirmed,
}

var _GroupTypeNames = []string{
	_GroupTypeName[0:7],
	_GroupTypeName[7:14],
	_GroupTypeName[14:23],
}

// GroupTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func GroupTypeString(s string) (GroupType, error) {
	if val, ok := _GroupTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _GroupTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to GroupType values", s)
}

// GroupTypeValues returns all values of the enum
func GroupTypeValues() []GroupType {
	return _GroupTypeValues
}

// GroupTypeStrings returns a slice of all String values of the enum
func GroupTypeStrings() []string {
	strs := make([]string, len(_GroupTypeNames))
	copy(strs, _GroupTypeNames)
	return strs
}

// IsAGroupType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i GroupType) IsAGroupType() bool {
	for _, v := range _GroupTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
