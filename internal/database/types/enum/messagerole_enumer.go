// Code generated by "enumer -type=MessageRole -trimprefix=MessageRole"; DO NOT EDIT.

package enum

import (
	"fmt"
	"strings"
)

const _MessageRoleName = "UserModerator"

var _MessageRoleIndex = [...]uint8{0, 4, 13}

const _MessageRoleLowerName = "usermoderator"

func (i MessageRole) String() string {
	if i < 0 || i >= MessageRole(len(_MessageRoleIndex)-1) {
		return fmt.Sprintf("MessageRole(%d)", i)
	}
	return _MessageRoleName[_MessageRoleIndex[i]:_MessageRoleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MessageRoleNoOp() {
	var x [1]struct{}
	_ = x[MessageRoleUser-(0)]
	_ = x[MessageRoleModerator-(1)]
}

var _MessageRoleValues = []MessageRole{MessageRoleUser, MessageRoleModerator}

var _MessageRoleNameToValueMap = map[string]MessageRole{
	_MessageRoleName[0:4]:       MessageRoleUser,
	_MessageRoleLowerName[0:4]:  MessageRoleUser,
	_MessageRoleName[4:13]:      MessageRoleModerator,
	_MessageRoleLowerName[4:13]: MessageRoleModerator,
}

var _MessageRoleNames = []string{
	_MessageRoleName[0:4],
	_MessageRoleName[4:13],
}

// MessageRoleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MessageRoleString(s string) (MessageRole, error) {
	if val, ok := _MessageRoleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MessageRoleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MessageRole values", s)
}

// MessageRoleValues returns all values of the enum
func MessageRoleValues() []MessageRole {
	return _MessageRoleValues
}

// MessageRoleStrings returns a slice of all String values of the enum
func MessageRoleStrings() []string {
	strs := make([]string, len(_MessageRoleNames))
	copy(strs, _MessageRoleNames)
	return strs
}

// IsAMessageRole returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MessageRole) IsAMessageRole() bool {
	for _, v := range _MessageRoleValues {
		if i == v {
			return true
		}
	}
	return false
}
