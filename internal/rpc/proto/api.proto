syntax = "proto3";

package rotector.api;
option go_package = "github.com/rotector/rotector/internal/common/api/proto";

// UserStatus represents which table the user exists in
enum UserStatus {
  USER_STATUS_FLAGGED = 0;
  USER_STATUS_CONFIRMED = 1;
  USER_STATUS_CLEARED = 2;
  USER_STATUS_BANNED = 3;
  USER_STATUS_UNFLAGGED = 4;
}

// GroupStatus represents which table the group exists in
enum GroupStatus {
  GROUP_STATUS_FLAGGED = 0;
  GROUP_STATUS_CONFIRMED = 1;
  GROUP_STATUS_CLEARED = 2;
  GROUP_STATUS_LOCKED = 3;
  GROUP_STATUS_UNFLAGGED = 4;
}

// UserGroup represents group information for users
message UserGroup {
  uint64 id = 1;
  string name = 2;
  string role = 3;
}

// Friend represents friend information
message Friend {
  uint64 id = 1;
  string name = 2;
  string display_name = 3;
  bool has_verified_badge = 4;
}

// Game represents game information
message Game {
  uint64 id = 1;
  string name = 2;
}

// GroupUser represents owner information
message GroupUser {
  uint64 id = 1;
  string name = 2;
  string display_name = 3;
}

// GroupShout represents group shout information
message GroupShout {
  string content = 1;
  GroupUser poster = 2;
}

// User represents all user information
message User {
  uint64 id = 1;
  string name = 2;
  string display_name = 3;
  string description = 4;
  string created_at = 5;
  string reason = 6;
  repeated UserGroup groups = 7;
  repeated Friend friends = 8;
  repeated Game games = 9;
  repeated string flagged_content = 10;
  repeated uint64 flagged_groups = 11;
  uint64 follower_count = 12;
  uint64 following_count = 13;
  double confidence = 14;
  string last_scanned = 15;
  string last_updated = 16;
  string last_viewed = 17;
  string thumbnail_url = 18;
  int32 upvotes = 19;
  int32 downvotes = 20;
  int32 reputation = 21;
}

// Group represents all group information
message Group {
  uint64 id = 1;
  string name = 2;
  string description = 3;
  GroupUser owner = 4;
  GroupShout shout = 5;
  string reason = 6;
  double confidence = 7;
  string last_scanned = 8;
  string last_updated = 9;
  string last_viewed = 10;
  string thumbnail_url = 11;
  int32 upvotes = 12;
  int32 downvotes = 13;
  int32 reputation = 14;
}

// GetUserRequest represents the request for getting user information
message GetUserRequest {
  string user_id = 1;
}

// GetUserResponse represents the response containing user information
message GetUserResponse {
  UserStatus status = 1;
  User user = 2;
}

// GetGroupRequest represents the request for getting group information
message GetGroupRequest {
  string group_id = 1;
}

// GetGroupResponse represents the response containing group information
message GetGroupResponse {
  GroupStatus status = 1;
  Group group = 2;
}

// RotectorService defines the combined service
service RotectorService {
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  rpc GetGroup(GetGroupRequest) returns (GetGroupResponse);
} 